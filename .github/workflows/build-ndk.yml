name: QPM build

on:
  workflow_dispatch:
  push:
    branches:
      - "master"
  pull_request:
    branches:
      - "master"
  schedule:
    - cron: "0 * * * *" # Run hourly

jobs:
  get-hooks:
    permissions:
      contents: read

    outputs:
      mods: ${{ steps.get-hooks.outputs.mods }}

    runs-on: ubuntu-latest

    steps:
      - name: Get all beatsaber-hook versions
        id: get-hooks
        run: |
          if [ "${{ runner.debug }}" = "1" ]; then
            set -x
          fi

          # Get all beatsaber-hook versions past 5.0.0 because anything older has broken dependencies
          mods="$(curl -s "https://qpackages.com/beatsaber-hook?limit=0" | jq -c '[.[] | select(.version > "5.1.0")]')"
          echo "mods=$mods" | tee -a "$GITHUB_OUTPUT"

  build:
    permissions:
      contents: write
      actions: write

    outputs:
      mods: ${{ needs.get-hooks.outputs.mods }}

    strategy:
      matrix:
        mods: ${{fromJson(needs.get-hooks.outputs.mods)}}

    runs-on: ubuntu-latest
    needs: get-hooks
    continue-on-error: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Read info from qpm.json
        id: qpm_info
        run: |
          NAME="$(jq -r '.info.name' qpm.json)"
          ID="$(jq -r '.info.id' qpm.json)"
          VERSION="$(jq -r '.info.version' qpm.json)"
          QMOD_OUTPUT_PATH="$(jq -r '.workspace.qmodOutput' qpm.json)"

          echo "name=${NAME}" | tee -a "$GITHUB_OUTPUT"
          echo "id=${ID}" | tee -a "$GITHUB_OUTPUT"
          echo "version=${VERSION}" | tee -a "$GITHUB_OUTPUT"
          echo "qmod_output_path=${QMOD_OUTPUT_PATH}" | tee -a "$GITHUB_OUTPUT"

      - name: Extract version
        id: version
        run: |
          merge_versions() {
              if [[ $# -ne 2 ]]; then
                  echo "Usage: merge_versions version_a version_b"
                  return 1
              fi

              local version_a=$1
              local version_b=$2

              # Parse version_a and version_b
              IFS='.' read -r major_a minor_a patch_a <<< "$version_a"
              IFS='.' read -r major_b minor_b patch_b <<< "$version_b"

              # Encode version_a into a 48-bit value
              local encoded_version_a=$(( (major_a << 32) | (minor_a << 16) | patch_a ))

              # Shift the encoded version_a 16 bits to the left and combine with patch_b
              local merged=$(( (encoded_version_a << 16) | patch_b ))

              # Output formatted as unsigned 64-bit integers
              printf "%llu.%llu.%llu\n" "$major_b" "$minor_b" "$merged"
          }

          echo "version=$(merge_versions "${{ matrix.mods.version }}" "${{ steps.qpm_info.outputs.version }}")" | tee -a "$GITHUB_OUTPUT"

      # Fetch all remote git tags and check if our version tag already exists
      - name: Fetch tags
        run: git fetch --tags

      - name: Check if tag exists
        id: tag_exists
        run: |
          if git rev-parse "v${{ steps.version.outputs.version }}"; then
            echo "exists=true" | tee -a "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "exists=false" | tee -a "$GITHUB_OUTPUT"

      - uses: seanmiddleditch/gha-setup-ninja@v3
        if: steps.tag_exists.outputs.exists == 'false'

      - name: Setup qpm
        if: steps.tag_exists.outputs.exists == 'false'
        uses: fernthedev/qpm-action@v1
        with:
          workflow_token: ${{ secrets.GITHUB_TOKEN }}
          restore: true
          resolve_ndk: true
          cache: true
          version: ${{ steps.version.outputs.version}}

      - name: Build & Create Qmod
        if: steps.tag_exists.outputs.exists == 'false'
        run: |
          ADDITIONAL_DATA='{"includeQmod": false, "private": true}'

          qpm clear
          qpm dependency remove beatsaber-hook
          qpm dependency remove paper
          qpm dependency remove paper2_scotland
          qpm dependency add -v "=${{ matrix.mods.version }}" beatsaber-hook

          if [[ "${{ matrix.mods.version }}" < "6.3.0" ]]; then
            qpm dependency add --additional-data "$ADDITIONAL_DATA" paper
          else
            qpm dependency add --additional-data "$ADDITIONAL_DATA" paper2_scotland2
          fi

          qpm restore
          qpm s make-hooking
          qpm s qmod
          qpm dependency remove paper
          qpm dependency remove paper2_scotland
          qpm restore

      - name: Configure GitHub Bot User
        if: steps.tag_exists.outputs.exists == 'false'
        run: |
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Commit changes
        if: steps.tag_exists.outputs.exists == 'false'
        run: |
          git add -A qpm.json qpm.shared.json shared/hooks.hpp
          git commit -m "Build for beatsaber-hook v${{ matrix.mods.version }}"
          git tag "v${{ steps.version.outputs.version }}"
          git push origin "v${{ steps.version.outputs.version }}"

      - name: Upload build artifacts
        if: steps.tag_exists.outputs.exists == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.mods.version }}
          if-no-files-found: error
          path: |
            shared/hooks.hpp
            ${{ steps.qpm_info.outputs.qmod_output_path }}

      # Dispatch the publish workflow with our tag as the ref
      - name: Dispatch publish workflow
        if: steps.tag_exists.outputs.exists == 'false'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'publish.yml',
              ref: 'refs/tags/v${{ steps.version.outputs.version }}'
            })

  combine:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: "./artifacts"

      - name: Upload combined artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Combined
          path: |
            ./artifacts
